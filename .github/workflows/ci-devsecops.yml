name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: productsdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install & Test Backend
        working-directory: backend
        run: |
          npm install
          npm test

      - name: Install & Test Frontend
        working-directory: frontend
        run: |
          npm install
          npm run build
          npm run test

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build Docker images
        run: docker compose build

      - name: Save Docker images
        run: docker save $(docker images --format '{{.Repository}}:{{.Tag}}') -o docker-images.tar

      - name: Upload Docker images as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker-images.tar

  security-scans:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # 1. SAST (CodeQL)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      # 2. Dependency Scan (Snyk)
      - name: Snyk Scan
        uses: snyk/actions/node@master
        with:
          args: test --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 3. Secrets Scan (Gitleaks)
      - name: Run gitleaks
        uses: zricethezav/gitleaks-action@v2

  docker-security:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # 4. Container Image Scan (Trivy)
      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository }}:latest
          format: table

  dast-scan:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Start app
        run: docker compose up -d && sleep 30

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
